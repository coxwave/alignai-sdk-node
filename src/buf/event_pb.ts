// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file ingestion/v1alpha/event.proto (package ingestion.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Event represents a every possible ingestion case.
 *
 * @generated from message ingestion.v1alpha.Event
 */
export class Event extends Message<Event> {
  /**
   * (Required) Unique identifier for the event
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * (Required) The type of event data
   * One of followings:
   * - session_open: Session is opened. Must send this event to analyze the session properly.
   * - message_create: Message is created. Must send this event to append message to the session.
   * - session_close: Session is closed. Recommend to send this event when you know session is explicitly closed. If not, impaction.ai will automatically close inactive sessions. (Inactive: no message for 30 minutes)
   * - user_recognize: User recognized. Must send this event to analyze user properly.
   *
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * (Required) Event generation time
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * (Required) Event properties
   *
   * @generated from field: ingestion.v1alpha.EventProperties properties = 4;
   */
  properties?: EventProperties;

  /**
   * (Required) Unique identifier for the project
   *
   * @generated from field: string project_id = 5;
   */
  projectId = "";

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ingestion.v1alpha.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "create_time", kind: "message", T: Timestamp },
    { no: 4, name: "properties", kind: "message", T: EventProperties },
    { no: 5, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * Client must set one of the following properties according to the event type.
 * Reserved properties:
 *   - session_open: SessionProperties
 *   - message_create: MessageProperties
 *   - session_close: SessionProperties
 *   - user_recognize: UserProperties
 *
 * @generated from message ingestion.v1alpha.EventProperties
 */
export class EventProperties extends Message<EventProperties> {
  /**
   * @generated from oneof ingestion.v1alpha.EventProperties.reserved_properties
   */
  reservedProperties: {
    /**
     * @generated from field: ingestion.v1alpha.EventProperties.SessionProperties session_properties = 1;
     */
    value: EventProperties_SessionProperties;
    case: "sessionProperties";
  } | {
    /**
     * @generated from field: ingestion.v1alpha.EventProperties.MessageProperties message_properties = 2;
     */
    value: EventProperties_MessageProperties;
    case: "messageProperties";
  } | {
    /**
     * @generated from field: ingestion.v1alpha.EventProperties.UserProperties user_properties = 3;
     */
    value: EventProperties_UserProperties;
    case: "userProperties";
  } | {
    /**
     * @generated from field: ingestion.v1alpha.EventProperties.FeedbackProperties feedback_properties = 4;
     */
    value: EventProperties_FeedbackProperties;
    case: "feedbackProperties";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<EventProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ingestion.v1alpha.EventProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_properties", kind: "message", T: EventProperties_SessionProperties, oneof: "reserved_properties" },
    { no: 2, name: "message_properties", kind: "message", T: EventProperties_MessageProperties, oneof: "reserved_properties" },
    { no: 3, name: "user_properties", kind: "message", T: EventProperties_UserProperties, oneof: "reserved_properties" },
    { no: 4, name: "feedback_properties", kind: "message", T: EventProperties_FeedbackProperties, oneof: "reserved_properties" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventProperties {
    return new EventProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventProperties {
    return new EventProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventProperties {
    return new EventProperties().fromJsonString(jsonString, options);
  }

  static equals(a: EventProperties | PlainMessage<EventProperties> | undefined, b: EventProperties | PlainMessage<EventProperties> | undefined): boolean {
    return proto3.util.equals(EventProperties, a, b);
  }
}

/**
 * @generated from message ingestion.v1alpha.EventProperties.SessionProperties
 */
export class EventProperties_SessionProperties extends Message<EventProperties_SessionProperties> {
  /**
   * (Required) Unique identifier for the session
   *
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * Title of the session
   *
   * @generated from field: string session_title = 2;
   */
  sessionTitle = "";

  /**
   * Start time of the session
   * Optional, but recommended to provide.
   *
   * @generated from field: google.protobuf.Timestamp session_start_time = 3;
   */
  sessionStartTime?: Timestamp;

  /**
   * (Required) User id of the session participant
   *
   * @generated from field: string user_id = 4;
   */
  userId = "";

  /**
   * (Required) Assistant id of session participant
   *
   * @generated from field: string assistant_id = 5;
   */
  assistantId = "";

  constructor(data?: PartialMessage<EventProperties_SessionProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ingestion.v1alpha.EventProperties.SessionProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session_title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "session_start_time", kind: "message", T: Timestamp },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "assistant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventProperties_SessionProperties {
    return new EventProperties_SessionProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventProperties_SessionProperties {
    return new EventProperties_SessionProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventProperties_SessionProperties {
    return new EventProperties_SessionProperties().fromJsonString(jsonString, options);
  }

  static equals(a: EventProperties_SessionProperties | PlainMessage<EventProperties_SessionProperties> | undefined, b: EventProperties_SessionProperties | PlainMessage<EventProperties_SessionProperties> | undefined): boolean {
    return proto3.util.equals(EventProperties_SessionProperties, a, b);
  }
}

/**
 * @generated from message ingestion.v1alpha.EventProperties.MessageProperties
 */
export class EventProperties_MessageProperties extends Message<EventProperties_MessageProperties> {
  /**
   * (Required) Unique identifier for the session
   *
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * Unique identifier for the message. This data only used for hint.
   *
   * @generated from field: string message_id_hint = 2;
   */
  messageIdHint = "";

  /**
   * (Required) Message index in the session.
   *
   * @generated from field: int32 message_index_hint = 3;
   */
  messageIndexHint = 0;

  /**
   * (Required) Role of the speaker
   *
   * @generated from field: ingestion.v1alpha.EventProperties.MessageProperties.Role message_role = 4;
   */
  messageRole = EventProperties_MessageProperties_Role.UNSPECIFIED;

  /**
   * (Required) Content of the message
   *
   * @generated from field: string message_content = 5;
   */
  messageContent = "";

  /**
   * Message creation time
   * Optional, but recommended to provide.
   *
   * @generated from field: google.protobuf.Timestamp message_create_time = 6;
   */
  messageCreateTime?: Timestamp;

  constructor(data?: PartialMessage<EventProperties_MessageProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ingestion.v1alpha.EventProperties.MessageProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message_id_hint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message_index_hint", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "message_role", kind: "enum", T: proto3.getEnumType(EventProperties_MessageProperties_Role) },
    { no: 5, name: "message_content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "message_create_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventProperties_MessageProperties {
    return new EventProperties_MessageProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventProperties_MessageProperties {
    return new EventProperties_MessageProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventProperties_MessageProperties {
    return new EventProperties_MessageProperties().fromJsonString(jsonString, options);
  }

  static equals(a: EventProperties_MessageProperties | PlainMessage<EventProperties_MessageProperties> | undefined, b: EventProperties_MessageProperties | PlainMessage<EventProperties_MessageProperties> | undefined): boolean {
    return proto3.util.equals(EventProperties_MessageProperties, a, b);
  }
}

/**
 * @generated from enum ingestion.v1alpha.EventProperties.MessageProperties.Role
 */
export enum EventProperties_MessageProperties_Role {
  /**
   * @generated from enum value: ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ROLE_USER = 1;
   */
  USER = 1,

  /**
   * @generated from enum value: ROLE_ASSISTANT = 2;
   */
  ASSISTANT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EventProperties_MessageProperties_Role)
proto3.util.setEnumType(EventProperties_MessageProperties_Role, "ingestion.v1alpha.EventProperties.MessageProperties.Role", [
  { no: 0, name: "ROLE_UNSPECIFIED" },
  { no: 1, name: "ROLE_USER" },
  { no: 2, name: "ROLE_ASSISTANT" },
]);

/**
 * All fields except user_id are optional but at least one field must be set.
 *
 * @generated from message ingestion.v1alpha.EventProperties.UserProperties
 */
export class EventProperties_UserProperties extends Message<EventProperties_UserProperties> {
  /**
   * (Required) Unique identifier for the user
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * User's email address
   * Optional, but recommended to provide.
   *
   * @generated from field: string user_email = 2;
   */
  userEmail = "";

  /**
   * User's IP address
   * Optional, but recommended to provide one of user_ip and user_location.
   *
   * @generated from field: string user_ip = 3;
   */
  userIp = "";

  /**
   * User's location
   * If you omit this field, impaction.ai will try to extract location from the IP address
   *
   * @generated from field: ingestion.v1alpha.EventProperties.UserProperties.Location user_location = 4;
   */
  userLocation?: EventProperties_UserProperties_Location;

  /**
   * User creation time
   * Optional, but recommended to provide.
   *
   * @generated from field: google.protobuf.Timestamp user_create_time = 5;
   */
  userCreateTime?: Timestamp;

  /**
   * User's display name
   * Usually, use legal name or nickname of the user
   * Optional, but recommended to provide.
   *
   * @generated from field: string user_display_name = 6;
   */
  userDisplayName = "";

  constructor(data?: PartialMessage<EventProperties_UserProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ingestion.v1alpha.EventProperties.UserProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_location", kind: "message", T: EventProperties_UserProperties_Location },
    { no: 5, name: "user_create_time", kind: "message", T: Timestamp },
    { no: 6, name: "user_display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventProperties_UserProperties {
    return new EventProperties_UserProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventProperties_UserProperties {
    return new EventProperties_UserProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventProperties_UserProperties {
    return new EventProperties_UserProperties().fromJsonString(jsonString, options);
  }

  static equals(a: EventProperties_UserProperties | PlainMessage<EventProperties_UserProperties> | undefined, b: EventProperties_UserProperties | PlainMessage<EventProperties_UserProperties> | undefined): boolean {
    return proto3.util.equals(EventProperties_UserProperties, a, b);
  }
}

/**
 * @generated from message ingestion.v1alpha.EventProperties.UserProperties.Location
 */
export class EventProperties_UserProperties_Location extends Message<EventProperties_UserProperties_Location> {
  /**
   * ISO-3166-1 alpha-2 code of the country
   *
   * @generated from field: string country_code = 1;
   */
  countryCode = "";

  /**
   * State name
   *
   * @generated from field: string state = 2;
   */
  state = "";

  /**
   * City name
   *
   * @generated from field: string city = 3;
   */
  city = "";

  constructor(data?: PartialMessage<EventProperties_UserProperties_Location>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ingestion.v1alpha.EventProperties.UserProperties.Location";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "country_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventProperties_UserProperties_Location {
    return new EventProperties_UserProperties_Location().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventProperties_UserProperties_Location {
    return new EventProperties_UserProperties_Location().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventProperties_UserProperties_Location {
    return new EventProperties_UserProperties_Location().fromJsonString(jsonString, options);
  }

  static equals(a: EventProperties_UserProperties_Location | PlainMessage<EventProperties_UserProperties_Location> | undefined, b: EventProperties_UserProperties_Location | PlainMessage<EventProperties_UserProperties_Location> | undefined): boolean {
    return proto3.util.equals(EventProperties_UserProperties_Location, a, b);
  }
}

/**
 * @generated from message ingestion.v1alpha.EventProperties.FeedbackProperties
 */
export class EventProperties_FeedbackProperties extends Message<EventProperties_FeedbackProperties> {
  /**
   * (Required) Unique identifier for the session
   *
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * (Required) Target resource of the feedback
   *
   * @generated from field: ingestion.v1alpha.EventProperties.FeedbackProperties.Target feedback_target = 2;
   */
  feedbackTarget = EventProperties_FeedbackProperties_Target.UNSPECIFIED;

  /**
   * (Required) Score of the feedback. 0
   *
   * @generated from field: int32 feedback_score = 3;
   */
  feedbackScore = 0;

  /**
   * Unique identifier for the message. This data only used for hint.
   *
   * @generated from field: string message_id_hint = 4;
   */
  messageIdHint = "";

  /**
   * Message index in the session.
   * Required if feedback_target is TARGET_MESSAGE.
   *
   * @generated from field: int32 message_index_hint = 5;
   */
  messageIndexHint = 0;

  constructor(data?: PartialMessage<EventProperties_FeedbackProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ingestion.v1alpha.EventProperties.FeedbackProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feedback_target", kind: "enum", T: proto3.getEnumType(EventProperties_FeedbackProperties_Target) },
    { no: 3, name: "feedback_score", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "message_id_hint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "message_index_hint", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventProperties_FeedbackProperties {
    return new EventProperties_FeedbackProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventProperties_FeedbackProperties {
    return new EventProperties_FeedbackProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventProperties_FeedbackProperties {
    return new EventProperties_FeedbackProperties().fromJsonString(jsonString, options);
  }

  static equals(a: EventProperties_FeedbackProperties | PlainMessage<EventProperties_FeedbackProperties> | undefined, b: EventProperties_FeedbackProperties | PlainMessage<EventProperties_FeedbackProperties> | undefined): boolean {
    return proto3.util.equals(EventProperties_FeedbackProperties, a, b);
  }
}

/**
 * @generated from enum ingestion.v1alpha.EventProperties.FeedbackProperties.Target
 */
export enum EventProperties_FeedbackProperties_Target {
  /**
   * @generated from enum value: TARGET_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * TARGET_SESSION represents the feedback is for the entire session.
   *
   * @generated from enum value: TARGET_SESSION = 1;
   */
  SESSION = 1,

  /**
   * TARGET_MESSAGE represents the feedback is for a specific message in the session.
   *
   * @generated from enum value: TARGET_MESSAGE = 2;
   */
  MESSAGE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EventProperties_FeedbackProperties_Target)
proto3.util.setEnumType(EventProperties_FeedbackProperties_Target, "ingestion.v1alpha.EventProperties.FeedbackProperties.Target", [
  { no: 0, name: "TARGET_UNSPECIFIED" },
  { no: 1, name: "TARGET_SESSION" },
  { no: 2, name: "TARGET_MESSAGE" },
]);

