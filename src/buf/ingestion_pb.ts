// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file ingestion/v1alpha/ingestion.proto (package ingestion.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Event } from "./event_pb.js";

/**
 * @generated from message ingestion.v1alpha.CollectEventsRequest
 */
export class CollectEventsRequest extends Message<CollectEventsRequest> {
  /**
   * A unique identifier for this request. Restricted to 36 ASCII characters.
   * A random UUID is recommended.
   * This request is only idempotent if a `request_id` is provided.
   *
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * Events to be collected
   *
   * @generated from field: repeated ingestion.v1alpha.Event events = 2;
   */
  events: Event[] = [];

  constructor(data?: PartialMessage<CollectEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ingestion.v1alpha.CollectEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "events", kind: "message", T: Event, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectEventsRequest {
    return new CollectEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectEventsRequest {
    return new CollectEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectEventsRequest {
    return new CollectEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectEventsRequest | PlainMessage<CollectEventsRequest> | undefined, b: CollectEventsRequest | PlainMessage<CollectEventsRequest> | undefined): boolean {
    return proto3.util.equals(CollectEventsRequest, a, b);
  }
}

